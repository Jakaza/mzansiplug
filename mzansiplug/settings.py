"""
Django settings for mzansiplug project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
# import storage.CloudflareStaticStorage

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_dh9i9qamdp+12!sw&7+i7osh05k4#6@79i0ozq%w&y2fcg87m'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["54.159.177.219", "127.0.0.1"]



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'django.contrib.sites',
    # my apps
    'base.apps.BaseConfig',
    # Other apps
    'ckeditor',
    'taggit',
    'imagekit',
    'storages',
    
]

SITE_ID = 1

AUTH_USER_MODEL = 'base.User'




MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mzansiplug.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates'
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mzansiplug.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }





# Fetch environment variables for PostgreSQL
POSTGRES_DB = os.getenv("DB_NAME")
POSTGRES_PASSWORD = os.getenv("DB_PASSWORD")
POSTGRES_USER = os.getenv("DB_USER")
POSTGRES_HOST = os.getenv("DB_HOST")
POSTGRES_PORT = 5432

print(POSTGRES_DB, POSTGRES_PASSWORD, POSTGRES_USER, POSTGRES_HOST, POSTGRES_PORT)

# Check if PostgreSQL environment variables are set
POSTGRES_READY = (
    POSTGRES_DB is not None
    and POSTGRES_PASSWORD is not None
    and POSTGRES_USER is not None
    and POSTGRES_HOST is not None
    and POSTGRES_PORT is not None
)


# Define the DATABASES setting based on the availability of PostgreSQL variables
if POSTGRES_READY:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': POSTGRES_DB,
            'USER': POSTGRES_USER,
            'PASSWORD': POSTGRES_PASSWORD,
            'HOST': POSTGRES_HOST,
            'PORT': POSTGRES_PORT,
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'mzansiplug',
            'USER': 'postgres',
            'PASSWORD': 'Jakaza@p1017.',
            'HOST': 'localhost',
            'PORT': 5432,
        }
    }






# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/


STATIC_URL = "/static/"
MEDIA_URL = '/media/'

CLOUDFLARE_NAME=os.getenv("CLOUDFLARE_R2_BUCKET_NAME")
CLOUDFLARE_ENDPOINT=os.getenv("CLOUDFLARE_R2_BUCKET_ENDPOINT")
CLOUDFLARE_STATIC_ENDPOINT=os.getenv("CLOUDFLARE_R2_BUCKET_STATIC_ENDPOINT")
CLOUDFLARE_ACCESS_KEY=os.getenv("CLOUDFLARE_R2_ACCESS_KEY")
CLOUDFLARE_SECRET_KEY=os.getenv("CLOUDFLARE_R2_SECRET_KEY")


CLOUDFLARE_R2_MEDIA_OPTIONS  = {
    "bucket_name": CLOUDFLARE_NAME,
    "default_acl": "public-read",  # "private"
    "signature_version": "s3v4",
    "endpoint_url": "https://7a2c4f23506401fc8ae2d33f59c076d0.r2.cloudflarestorage.com",
    "access_key": CLOUDFLARE_ACCESS_KEY,
    "secret_key": CLOUDFLARE_SECRET_KEY,
    "location": "media",
}

CLOUDFLARE_R2_STATIC_OPTIONS  = {
    "bucket_name": CLOUDFLARE_NAME,
    "default_acl": "public-read",  # "private"
    "signature_version": "s3v4",
    "endpoint_url": CLOUDFLARE_STATIC_ENDPOINT,
    "access_key": CLOUDFLARE_ACCESS_KEY,
    "secret_key": CLOUDFLARE_SECRET_KEY,
    "location": "static",
}

STORAGES = {
    "default": {
        "BACKEND": "storage.backends.s3boto3.S3Boto3Storage",
        "OPTIONS": CLOUDFLARE_R2_MEDIA_OPTIONS ,
    },
    "staticfiles": {
        "BACKEND": "base.storage.CloudflareStaticStorage",
    },
}

AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = "public-read"

# STATIC_URL = 'static/'

STATICFILES_DIRS = [
    BASE_DIR / 'static'
]





# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
